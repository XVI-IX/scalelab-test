// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum user_role {
  customer
  superadmin
  vendor
}

enum order_status {
  pending
  processing
  delivered
  canceled
}

enum payment_status {
  pending
  failed
  successful
}

enum status {
  pending
  approved
  rejected
}

model users {
  user_id           Int       @id @default(autoincrement())
  user_name         String
  email             String    @unique
  phone_number      String?
  password          String?
  google_id         String?   @unique
  role              user_role @default(customer)
  verified          Boolean   @default(false)
  verificationToken String?   @unique
  resetToken        String?
  created_at        DateTime  @default(now()) @db.Timestamp(6)
  updated_at        DateTime  @updatedAt
  orders            orders[]
}

model vendors {
  vendor_id         Int      @id @default(autoincrement())
  name              String
  email             String   @unique
  password          String
  phone_number      String   @unique
  business_address  String
  verificationToken String?  @unique
  verified          Boolean  @default(false)
  status            status   @default(pending)
  resetToken        String?
  role              String   @default("vendor")
  stores            stores[]
  orders            orders[]
  created_at        DateTime @default(now()) @db.Timestamp(6)
  updated_at        DateTime @updatedAt
}

model stores {
  store_id    Int      @id @default(autoincrement())
  vendor_id   Int
  vendor      vendors? @relation(fields: [vendor_id], references: [vendor_id], onDelete: Cascade)
  name        String
  address     String
  description String
  image_url   String
  active      Boolean? @default(false)
  status            status   @default(pending)
  items       items[]
  orders      orders[]
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @updatedAt
}

model items {
  item_id     Int           @id @default(autoincrement())
  store       stores        @relation(fields: [store_id], references: [store_id])
  store_id    Int
  name        String
  description String
  price       Float
  image_url   String
  available   Boolean       @default(true)
  order_items order_items[]
  created_at  DateTime      @default(now()) @db.Timestamp(6)
  updated_at  DateTime      @updatedAt
}

model orders {
  order_id         Int            @id @default(autoincrement())
  customer         users          @relation(fields: [customer_id], references: [user_id])
  customer_id      Int
  store            stores         @relation(fields: [store_id], references: [store_id])
  store_id         Int
  timeslot         timeslots      @relation(fields: [timeslot_id], references: [timeslot_id])
  timeslot_id      Int
  placed_at        DateTime       @default(now())
  status           order_status   @default(pending)
  total_price      Float
  payment_status   payment_status @default(pending)
  order_items      order_items[]
  vendors          vendors?       @relation(fields: [vendorsVendor_id], references: [vendor_id])
  vendorsVendor_id Int?
}

model order_items {
  order_item_id Int    @id @default(autoincrement())
  order         orders @relation(fields: [order_id], references: [order_id])
  order_id      Int
  item          items  @relation(fields: [item_id], references: [item_id])
  item_id       Int
  quantity      Int
  price         Float
}

model timeslots {
  timeslot_id Int      @id @default(autoincrement())
  start_time  DateTime
  end_time    DateTime
  orders      orders[]
}
