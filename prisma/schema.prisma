// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum user_role {
  customer
  superadmin
  vendor
}

enum order_status {
  pending
  processing
  confirmed
  delivered
  canceled
}

enum payment_status {
  pending
  failed
  successful
}

enum genericStatus {
  pending
  approved
  rejected
}

model users {
  id                Int       @id @default(autoincrement())
  user_name         String
  email             String    @unique
  phone_number      String?
  password          String?
  google_id         String?   @unique
  role              user_role @default(customer)
  verified          Boolean   @default(false)
  verificationToken String?   @unique
  resetToken        String?
  created_at        DateTime  @default(now()) @db.Timestamp(6)
  updated_at        DateTime  @updatedAt
  orders            orders[]
}

model vendors {
  id                Int           @id @default(autoincrement())
  name              String
  email             String        @unique
  password          String
  phone_number      String        @unique
  business_address  String
  verificationToken String?       @unique
  verified          Boolean       @default(false)
  recipient_code    String?
  status            genericStatus @default(pending)
  resetToken        String?
  role              String        @default("vendor")
  stores            stores[]
  orders            orders[]
  created_at        DateTime      @default(now()) @db.Timestamp(6)
  updated_at        DateTime      @updatedAt
}

model stores {
  id          Int           @id @default(autoincrement())
  vendor_id   Int
  vendor      vendors?      @relation(fields: [vendor_id], references: [id], onDelete: Cascade)
  name        String
  address     String
  description String
  image_url   String
  active      Boolean?      @default(false)
  status      genericStatus @default(pending)
  admin_open  Boolean       @default(true)
  items       items[]
  orders      orders[]
  created_at  DateTime      @default(now()) @db.Timestamp(6)
  updated_at  DateTime      @updatedAt
}

model items {
  id          Int      @id @default(autoincrement())
  store       stores   @relation(fields: [store_id], references: [id], onDelete: Cascade)
  store_id    Int
  name        String
  description String
  price       Float
  image_url   String
  available   Boolean  @default(true)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @updatedAt
}

model orders {
  id                Int           @id @default(autoincrement())
  customer          users         @relation(fields: [customer_id], references: [id])
  customer_id       Int
  store             stores        @relation(fields: [store_id], references: [id])
  store_id          Int
  timeslot          timeslots?    @relation(fields: [timeslot_id], references: [id])
  timeslot_id       Int
  placed_at         DateTime      @default(now())
  delivery_location String
  status            order_status  @default(pending)
  total_price       Float
  order_items       order_items[]
  vendors           vendors?      @relation(fields: [vendor_id], references: [id])
  vendor_id         Int?
}

model order_items {
  id       Int    @id @default(autoincrement())
  order    orders @relation(fields: [order_id], references: [id], onDelete: Cascade)
  order_id Int
  item_id  Int
  quantity Int
  price    Float
}

model timeslots {
  id         Int      @id @default(autoincrement())
  start_time DateTime @db.Timestamp(6)
  end_time   DateTime @db.Timestamp(6)
  orders     orders[]
}

model payments {
  id        Int    @id @default(autoincrement())
  reference String @unique
  order_id  Int
  status    String @default("pending")
}
